import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from dotenv import load_dotenv
import os
import asyncio

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not API_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ (–ø—Ä–∏–º–µ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ)
PROXY_URLS = [
    "http://103.169.142.235:80",  # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–∫—Å–∏ 1
    "http://156.225.72.46:80", # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–∫—Å–∏ 2
    "http://185.162.229.161:80"  # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–∫—Å–∏ 3
]

for proxy_url in PROXY_URLS:
    try:
        session = AiohttpSession(proxy=proxy_url)
        logging.info(f"–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_url}")
        break
    except Exception as e:
        logging.warning(f"–ü—Ä–æ–∫—Å–∏ {proxy_url} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
else:
    raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø—Ä–æ–∫—Å–∏")

logging.basicConfig(level=logging.INFO)
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML"),
    session=session
)
dp = Dispatcher()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}
waiting_users = []

@dp.message(Command("start"))
async def start(message: Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç. –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

@dp.message(Command("find"))
async def find_partner(message: Message):
    user_id = message.from_user.id

    if user_id in active_users:
        await message.reply("‚ùå –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ù–∞–ø–∏—à–∏ /stop, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
        return

    if waiting_users and waiting_users[0] != user_id:
        partner_id = waiting_users.pop(0)
        active_users[user_id] = partner_id
        active_users[partner_id] = user_id

        await bot.send_message(user_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.")
        await bot.send_message(partner_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.")
    else:
        if user_id not in waiting_users:
            waiting_users.append(user_id)
        await message.reply("üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

@dp.message(Command("stop"))
async def stop_chat(message: Message):
    user_id = message.from_user.id

    if user_id in active_users:
        partner_id = active_users[user_id]
        del active_users[user_id]
        del active_users[partner_id]

        await bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        await bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ.")
    else:
        await message.reply("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@dp.message(F.text)
async def send_message(message: Message):
    user_id = message.from_user.id

    if user_id in active_users:
        partner_id = active_users[user_id]
        await bot.send_message(partner_id, f"üë§: {message.text}")
    else:
        await message.reply("‚ùå –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())