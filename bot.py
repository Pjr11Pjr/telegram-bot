import logging
from flask import Flask
from threading import Thread
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    PhotoSize,
    Voice,
    VideoNote,
    Video
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv
import os
import asyncio
import re
import signal
import uuid
from typing import Dict, List, Set, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_ID = 7618960051  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
VIP_PRICE = "299 —Ä—É–±./–º–µ—Å"  # –°—Ç–æ–∏–º–æ—Å—Ç—å VIP —Å—Ç–∞—Ç—É—Å–∞
BOT_USERNAME = "AnonimChatByXBot"  # –Æ–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ –±–µ–∑ @
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME', '')}{WEBHOOK_PATH}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
flask_app = Flask(__name__)

@flask_app.route('/')
def health_check():
    return "Bot is running", 200

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
vip_users: Set[int] = set()
active_users: Dict[int, Dict[str, Optional[int | str]]] = {}  # {user_id: {"partner_id": int, "username": str}}
waiting_users: List[int] = []  # –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
user_data_cache: Dict[int, Dict[str, Optional[str]]] = {}  # {user_id: {"username": str, "first_name": str}}
duo_links: Dict[str, int] = {}  # {link_id: creator_id}

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
URL_PATTERN = re.compile(r'https?://\S+')

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not API_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üì± –ú–µ–Ω—é"))
    return builder.as_markup(resize_keyboard=True)


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="/find"))
    builder.add(KeyboardButton(text="/stop"))
    builder.add(KeyboardButton(text="/next"))
    builder.add(KeyboardButton(text="/vip"))
    builder.add(KeyboardButton(text="/duo"))
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)


def get_vip_keyboard() -> ReplyKeyboardMarkup:
    """VIP –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return get_main_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


def get_confirm_keyboard(action: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}_yes"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_{action}_no")
    )
    return builder.as_markup()


async def save_user_info(user) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_data_cache[user.id] = {
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name
    }


def get_user_log_info(user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤"""
    user = user_data_cache.get(user_id, {})
    username = f"@{user.get('username')}" if user.get("username") else "–±–µ–∑ username"
    first_name = user.get("first_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    last_name = f" {user.get('last_name')}" if user.get("last_name") else ""
    return f"{user_id} ({first_name}{last_name} {username})"


async def forward_to_admin(user_id: int, file_id: str, content_type: str) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        user_info = user_data_cache.get(user_id, {})
        username = user_info.get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        caption = f"–ú–µ–¥–∏–∞ –æ—Ç {get_user_log_info(user_id)}"

        send_methods = {
            "photo": bot.send_photo,
            "voice": bot.send_voice,
            "video": bot.send_video,
            "video_note": bot.send_video_note
        }

        if content_type in send_methods:
            await send_methods[content_type](
                chat_id=ADMIN_ID,
                **{content_type: file_id},
                caption=caption if content_type != "video_note" else None
            )
            if content_type == "video_note":
                await bot.send_message(ADMIN_ID, caption)

        logger.info(f"–ú–µ–¥–∏–∞ {content_type} –æ—Ç {get_user_log_info(user_id)} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)


async def stop_chat(user_id: int, initiator: bool = True) -> Optional[int]:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞"""
    if user_id not in active_users:
        return None

    partner_info = active_users[user_id]
    partner_id = partner_info["partner_id"]

    # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    del active_users[user_id]
    if partner_id in active_users:
        del active_users[partner_id]

    logger.info(f"–ß–∞—Ç –º–µ–∂–¥—É {get_user_log_info(user_id)} –∏ {get_user_log_info(partner_id)} –∑–∞–≤–µ—Ä—à–µ–Ω")

    messages = {
        user_id: "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..." if initiator else "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç",
        partner_id: "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞."
    }

    for uid, text in messages.items():
        await bot.send_message(uid, text, reply_markup=get_menu_keyboard())

    return partner_id


async def find_partner_logic(user_id: int) -> bool:
    """–õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    for i, partner_id in enumerate(waiting_users):
        if partner_id != user_id:
            waiting_users.pop(i)
            active_users.update({
                user_id: {"partner_id": partner_id, "username": user_data_cache.get(user_id, {}).get("username")},
                partner_id: {"partner_id": user_id, "username": user_data_cache.get(partner_id, {}).get("username")}
            })

            logger.info(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç –º–µ–∂–¥—É {get_user_log_info(user_id)} –∏ {get_user_log_info(partner_id)}")

            message = "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –û–±—â–∞–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ.\n–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ 'üì± –ú–µ–Ω—é'"
            await asyncio.gather(
                bot.send_message(user_id, message, reply_markup=get_menu_keyboard()),
                bot.send_message(partner_id, message, reply_markup=get_menu_keyboard())
            )
            return True
    return False


async def forward_message(sender_id: int, receiver_id: int, content: str, content_type: str) -> bool:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        send_methods = {
            "text": (bot.send_message, {"text": f"üë§: {content}"}),
            "photo": (bot.send_photo, {"photo": content, "caption": "üì∑ –§–æ—Ç–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"}),
            "voice": (bot.send_voice, {"voice": content, "caption": "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"}),
            "video_note": (bot.send_video_note, {"video_note": content}),
            "video": (bot.send_video, {"video": content, "caption": "üé• –í–∏–¥–µ–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"})
        }

        if content_type in send_methods:
            method, params = send_methods[content_type]
            await method(receiver_id, reply_markup=get_menu_keyboard(), **params)

        logger.info(
            f"{content_type.capitalize()} –æ—Ç {get_user_log_info(sender_id)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {get_user_log_info(receiver_id)}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {content_type}: {e}", exc_info=True)
        await stop_chat(sender_id, initiator=False)
        return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def handle_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    args = message.text.split()
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Duo —Å—Å—ã–ª–∫–∏
    if len(args) > 1 and args[1].startswith("duo_"):
        link_id = args[1][4:]
        creator_id = duo_links.get(link_id)

        if not creator_id:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞")
            return

        if user_id == creator_id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
            return

        if creator_id in active_users or user_id in active_users:
            await message.answer("‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –≤ –¥—Ä—É–≥–æ–º –¥–∏–∞–ª–æ–≥–µ")
            return

        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
        active_users.update({
            user_id: {"partner_id": creator_id, "username": user.username},
            creator_id: {"partner_id": user_id, "username": user_data_cache.get(creator_id, {}).get("username")}
        })

        del duo_links[link_id]

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        success_message = "‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω! –û–±—â–∞–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ."
        await asyncio.gather(
            bot.send_message(user_id, success_message, reply_markup=get_menu_keyboard()),
            bot.send_message(creator_id, success_message, reply_markup=get_menu_keyboard())
        )
        logger.info(f"–°–æ–∑–¥–∞–Ω Duo —á–∞—Ç –º–µ–∂–¥—É {user_id} –∏ {creator_id}")
        return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/find - –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/stop - –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞\n"
        "/next - —Å–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/vip - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP-—Å—Ç–∞—Ç—É—Å–µ\n"
        "/duo - —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –¥–∏–∞–ª–æ–≥–∞\n\n"
        "–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –ú–µ–Ω—é'"
    )
    await message.answer(welcome_message, reply_markup=get_menu_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


@dp.message(Command("duo"))
async def create_duo_link(message: Message) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id in active_users:
        await message.answer("‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é /stop")
        return

    link_id = str(uuid.uuid4())
    duo_links[link_id] = user_id

    duo_link = f"https://t.me/{BOT_USERNAME}?start=duo_{link_id}"

    await message.answer(
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:\n\n{duo_link}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥.",
        reply_markup=get_menu_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} —Å–æ–∑–¥–∞–ª Duo —Å—Å—ã–ª–∫—É: {link_id}")


@dp.message(Command("vip"))
async def vip_info(message: Message) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP —Å—Ç–∞—Ç—É—Å–µ"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id in vip_users:
        await message.answer(
            "üéâ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP-—Å—Ç–∞—Ç—É—Å!\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ",
            reply_markup=get_vip_keyboard()
        )
    else:
        await message.answer(
            "üîí VIP-—Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä—É–∂–∫–æ–≤)\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {VIP_PRICE}\n"
            f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            reply_markup=get_vip_keyboard()
        )


@dp.message(Command("find"))
async def find_partner(message: Message) -> None:
    """–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id in active_users:
        await message.reply("‚ö†Ô∏è –í—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
        return

    if user_id in waiting_users:
        await message.answer("–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–∏—Å–∫")
        return

    if not await find_partner_logic(user_id):
        waiting_users.append(user_id)
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {len(waiting_users)}")
        await message.reply("üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... –û–∂–∏–¥–∞–π—Ç–µ.", reply_markup=get_menu_keyboard())


@dp.message(Command("stop"))
async def stop_chat_handler(message: Message) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id not in active_users:
        await message.answer("‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç?",
        reply_markup=get_confirm_keyboard("stop")
    )


@dp.message(Command("next"))
async def next_partner(message: Message) -> None:
    """–°–º–µ–Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id not in active_users:
        await message.answer("‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",
        reply_markup=get_confirm_keyboard("next")
    )


@dp.callback_query(lambda c: c.data.startswith("confirm_"))
async def process_confirmation(callback_query: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
    user_id = callback_query.from_user.id
    action, response = callback_query.data.split("_")[1:3]

    await bot.answer_callback_query(callback_query.id)

    if response == "yes":
        if action == "next":
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–º–µ–Ω—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
            partner_id = await stop_chat(user_id, initiator=True)

            if user_id not in waiting_users:
                waiting_users.append(user_id)

            await bot.send_message(
                user_id,
                "üîÑ –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
                reply_markup=get_menu_keyboard()
            )
            await find_partner_logic(user_id)

        elif action == "stop":
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞")
            await stop_chat(user_id)
            await bot.send_message(
                user_id,
                "üóëÔ∏è –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find",
                reply_markup=get_menu_keyboard()
            )
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        await bot.send_message(
            user_id,
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ.",
            reply_markup=get_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞
@dp.message(F.photo)
async def handle_photo(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    await forward_to_admin(user_id, message.photo[-1].file_id, "photo")

    if user_id in active_users:
        partner_id = active_users[user_id]["partner_id"]
        await forward_message(user_id, partner_id, message.photo[-1].file_id, "photo")
    else:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_menu_keyboard()
        )


@dp.message(F.voice)
async def handle_voice(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    await forward_to_admin(user_id, message.voice.file_id, "voice")

    if user_id in active_users:
        partner_id = active_users[user_id]["partner_id"]
        await forward_message(user_id, partner_id, message.voice.file_id, "voice")
    else:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_menu_keyboard()
        )


@dp.message(F.video_note)
async def handle_video_note(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä—É–∂–∫–æ–≤)"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id not in vip_users:
        await message.answer(
            "üîí –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vip –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            reply_markup=get_menu_keyboard()
        )
        return

    await forward_to_admin(user_id, message.video_note.file_id, "video_note")

    if user_id in active_users:
        partner_id = active_users[user_id]["partner_id"]
        await forward_message(user_id, partner_id, message.video_note.file_id, "video_note")
    else:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_menu_keyboard()
        )


@dp.message(F.video)
async def handle_video(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id not in vip_users:
        await message.answer(
            "üîí –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vip –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            reply_markup=get_menu_keyboard()
        )
        return

    await forward_to_admin(user_id, message.video.file_id, "video")

    if user_id in active_users:
        partner_id = active_users[user_id]["partner_id"]
        await forward_message(user_id, partner_id, message.video.file_id, "video")
    else:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_menu_keyboard()
        )


@dp.message(F.text)
async def send_text_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = message.from_user
    await save_user_info(user)
    user_id = user.id
    text = message.text

    if text == "üì± –ú–µ–Ω—é":
        await message.answer(
            "–ú–µ–Ω—é:",
            reply_markup=get_vip_keyboard() if user_id in vip_users else get_main_keyboard()
        )
        return

    if URL_PATTERN.search(text):
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –æ—Ç {get_user_log_info(user_id)}")
        return

    log_text = text if len(text) <= 50 else f"{text[:50]}..."
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {get_user_log_info(user_id)}: {log_text}")

    if user_id in active_users:
        partner_id = active_users[user_id]["partner_id"]
        await forward_message(user_id, partner_id, text, "text")
    else:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_menu_keyboard()
        )


@dp.message()
async def unhandled_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—É—á—Ç–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.debug(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {message.content_type}")


async def on_startup(dp: Dispatcher) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
    if os.getenv("USE_WEBHOOK", "").lower() == "true":
        await bot.set_webhook(WEBHOOK_URL)
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def on_shutdown(dp: Dispatcher) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    if os.getenv("USE_WEBHOOK", "").lower() == "true":
        await bot.delete_webhook()
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
    for user_id in list(active_users.keys()):
        await stop_chat(user_id, initiator=False)
    await dp.storage.close()
    await dp.storage.wait_closed()
    logger.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")


def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
    port = int(os.getenv("PORT", 5000))
    flask_app.run(host='0.0.0.0', port=port)


async def polling_main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    loop = asyncio.get_running_loop()
    loop.add_signal_handler(
        signal.SIGTERM,
        lambda: asyncio.create_task(on_shutdown(dp))
    )

    restart_delay = 5
    max_restart_delay = 60
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await bot.delete_webhook(drop_pending_updates=True)
            await dp.start_polling(bot, close_bot_session=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {restart_delay} —Å–µ–∫...", exc_info=True)
            await asyncio.sleep(restart_delay)
            restart_delay = min(restart_delay * 1.5, max_restart_delay)
            try:
                await bot.session.close()
            except:
                pass


def webhook_main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host='0.0.0.0',
        port=int(os.getenv("WEBHOOK_PORT", 3000))
    )


if __name__ == '__main__':
    try:
        if os.getenv("USE_WEBHOOK", "").lower() == "true":
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook")
            webhook_main()
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
            asyncio.run(polling_main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)