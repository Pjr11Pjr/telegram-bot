import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    PhotoSize,
    Voice,
    VideoNote
)
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
import os
import asyncio
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î)
vip_users = set()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
URL_PATTERN = re.compile(r'https?://\S+')


def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="/find"))
    builder.add(KeyboardButton(text="/stop"))
    builder.add(KeyboardButton(text="/next"))
    builder.add(KeyboardButton(text="/vip"))
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)


def get_vip_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π VIP-–∫–Ω–æ–ø–∫–æ–π"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="/find"))
    builder.add(KeyboardButton(text="/stop"))
    builder.add(KeyboardButton(text="/next"))
    builder.add(KeyboardButton(text="/vip"))
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)


load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not API_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_users = {}  # {user_id: {"partner_id": int, "username": str}}
waiting_users = []  # –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
user_data_cache = {}  # {user_id: {"username": str, "first_name": str}}


async def save_user_info(user):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–µ—à"""
    user_data_cache[user.id] = {
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name
    }


def get_user_log_info(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = user_data_cache.get(user_id, {})
    username = f"@{user.get('username')}" if user.get('username') else "–±–µ–∑ username"
    first_name = user.get('first_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    last_name = f" {user.get('last_name')}" if user.get('last_name') else ""
    return f"{user_id} ({first_name}{last_name} {username})"


async def stop_chat(user_id: int, initiator: bool = True):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞"""
    if user_id in active_users:
        partner_info = active_users[user_id]
        partner_id = partner_info["partner_id"]

        del active_users[user_id]
        del active_users[partner_id]

        logger.info(f"–ß–∞—Ç –º–µ–∂–¥—É {get_user_log_info(user_id)} –∏ {get_user_log_info(partner_id)} –∑–∞–≤–µ—Ä—à–µ–Ω")
        if initiator:
            await bot.send_message(
                user_id,
                "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
                reply_markup=get_main_keyboard()
            )
            await bot.send_message(
                partner_id,
                "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
                reply_markup=get_main_keyboard()
            )
        return partner_id
    return None


@dp.message(Command("start"))
async def start(message: Message):
    user = message.from_user
    await save_user_info(user)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user.id)} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/find - –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/stop - –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞\n"
        "/next - —Å–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/vip - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP-—Å—Ç–∞—Ç—É—Å–µ",
        reply_markup=get_main_keyboard()
    )


@dp.message(Command("vip"))
async def vip_info(message: Message):
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id in vip_users:
        await message.answer(
            "üéâ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP-—Å—Ç–∞—Ç—É—Å!\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è",
            reply_markup=get_vip_keyboard()
        )
    else:
        await message.answer(
            "üîí VIP-—Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä—É–∂–∫–æ–≤)\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±./–º–µ—Å\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @admin",
            reply_markup=get_vip_keyboard()
        )


@dp.message(Command("health"))
async def health_check(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info(f"Health check –æ—Ç {get_user_log_info(message.from_user.id)}")


@dp.message(Command("find"))
async def find_partner(message: Message):
    user = message.from_user
    await save_user_info(user)
    user_id = user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} –∏—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

    if user_id in active_users:
        await message.reply("‚ö†Ô∏è –í—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    for i, partner_id in enumerate(waiting_users):
        if partner_id != user_id:
            waiting_users.pop(i)
            active_users[user_id] = {
                "partner_id": partner_id,
                "username": user.username
            }
            active_users[partner_id] = {
                "partner_id": user_id,
                "username": user_data_cache.get(partner_id, {}).get("username")
            }

            logger.info(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç –º–µ–∂–¥—É {get_user_log_info(user_id)} –∏ {get_user_log_info(partner_id)}")
            await bot.send_message(
                user_id,
                "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –û–±—â–∞–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ.",
                reply_markup=get_main_keyboard()
            )
            await bot.send_message(
                partner_id,
                "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –û–±—â–∞–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ.",
                reply_markup=get_main_keyboard()
            )
            return

    if user_id not in waiting_users:
        waiting_users.append(user_id)
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {len(waiting_users)}")
        await message.reply("üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... –û–∂–∏–¥–∞–π—Ç–µ.")


@dp.message(Command("stop"))
async def stop_chat_handler(message: Message):
    user = message.from_user
    await save_user_info(user)
    user_id = user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
    await stop_chat(user_id)
    await message.answer(
        "üóëÔ∏è –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find",
        reply_markup=get_main_keyboard()
    )


@dp.message(Command("next"))
async def next_partner(message: Message):
    user = message.from_user
    await save_user_info(user)
    user_id = user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_log_info(user_id)} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

    partner_id = await stop_chat(user_id)

    if user_id not in waiting_users:
        waiting_users.append(user_id)

    await message.answer("üîÑ –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    await find_partner(message)


@dp.message(F.photo)
async def handle_photo(message: Message):
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id in active_users:
        partner_id = active_users[user_id]["partner_id"]
        try:
            await bot.send_photo(
                partner_id,
                message.photo[-1].file_id,
                caption="üì∑ –§–æ—Ç–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                reply_markup=get_main_keyboard()
            )
            logger.info(f"–§–æ—Ç–æ –æ—Ç {get_user_log_info(user_id)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {get_user_log_info(partner_id)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await stop_chat(user_id, initiator=False)
    else:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_main_keyboard()
        )


@dp.message(F.voice)
async def handle_voice(message: Message):
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id in active_users:
        partner_id = active_users[user_id]["partner_id"]
        try:
            await bot.send_voice(
                partner_id,
                message.voice.file_id,
                caption="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                reply_markup=get_main_keyboard()
            )
            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {get_user_log_info(user_id)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {get_user_log_info(partner_id)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
            await stop_chat(user_id, initiator=False)
    else:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_main_keyboard()
        )


@dp.message(F.video_note)
async def handle_video_note(message: Message):
    user = message.from_user
    await save_user_info(user)
    user_id = user.id

    if user_id not in vip_users:
        await message.answer(
            "üîí –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vip –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            reply_markup=get_vip_keyboard()
        )
        return

    if user_id in active_users:
        partner_id = active_users[user_id]["partner_id"]
        try:
            await bot.send_video_note(
                partner_id,
                message.video_note.file_id,
                reply_markup=get_main_keyboard()
            )
            logger.info(f"–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {get_user_log_info(user_id)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {get_user_log_info(partner_id)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await stop_chat(user_id, initiator=False)
    else:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_main_keyboard()
        )


@dp.message(F.text)
async def send_message(message: Message):
    user = message.from_user
    await save_user_info(user)
    user_id = user.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏
    if URL_PATTERN.search(text):
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –æ—Ç {get_user_log_info(user_id)}")
        return

    log_text = text if len(text) <= 50 else f"{text[:50]}..."
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {get_user_log_info(user_id)}: {log_text}")

    if user_id in active_users:
        partner_id = active_users[user_id]["partner_id"]
        try:
            await bot.send_message(
                partner_id,
                f"üë§: {text}",
                reply_markup=get_main_keyboard()
            )
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ {get_user_log_info(user_id)} ‚Üí {get_user_log_info(partner_id)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await stop_chat(user_id, initiator=False)
    else:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_main_keyboard()
        )


async def main():
    restart_delay = 5
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await dp.start_polling(bot, close_bot_session=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {restart_delay} —Å–µ–∫...")
            await asyncio.sleep(restart_delay)
            restart_delay = min(restart_delay * 2, 60)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")