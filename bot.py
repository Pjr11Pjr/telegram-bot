import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import os
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log")  # –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not API_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}
waiting_users = []


@dp.message(Command("start"))
async def start(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç. –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")


@dp.message(Command("find"))
async def find_partner(message: Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

    if user_id in active_users:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ —á–∞—Ç–µ")
        await message.reply("‚ùå –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ù–∞–ø–∏—à–∏ /stop, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
        return

    if waiting_users and waiting_users[0] != user_id:
        partner_id = waiting_users.pop(0)
        active_users[user_id] = partner_id
        active_users[partner_id] = user_id

        logger.info(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç –º–µ–∂–¥—É {user_id} –∏ {partner_id}")
        await bot.send_message(user_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.")
        await bot.send_message(partner_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.")
    else:
        if user_id not in waiting_users:
            waiting_users.append(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è")
        await message.reply("üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")


@dp.message(Command("stop"))
async def stop_chat(message: Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")

    if user_id in active_users:
        partner_id = active_users[user_id]
        del active_users[user_id]
        del active_users[partner_id]

        logger.info(f"–ß–∞—Ç –º–µ–∂–¥—É {user_id} –∏ {partner_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
        await bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        await bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ.")
    else:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —á–∞—Ç–µ")
        await message.reply("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


@dp.message(F.text)
async def send_message(message: Message):
    user_id = message.from_user.id
    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message.text}")

    if user_id in active_users:
        partner_id = active_users[user_id]
        logger.info(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id} –∫ {partner_id}")
        await bot.send_message(partner_id, f"üë§: {message.text}")
    else:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —á–∞—Ç–µ")
        await message.reply("‚ùå –ù–∞–ø–∏—à–∏ /find, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")